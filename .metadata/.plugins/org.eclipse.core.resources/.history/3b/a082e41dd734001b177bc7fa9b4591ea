package uk.ac.ed.inf.aqmaps;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse.BodyHandlers;

import com.google.gson.Gson;
import com.mapbox.geojson.Feature;
import com.mapbox.geojson.Point;

public class Sensor extends App {
	private String location;
	private double battery;
	private String reading;
	private Point p;
	private boolean visited;
	private int label;
	
	protected String getLocation() {
		return location;
	}
	
	protected double getBattery() {
		return battery;
	}
	
	protected String getReading() {
		return reading;
	}
	
	protected Point getP() {
		return p;
	}
	
	protected int getVisited() {
		return visited;
	}
	protected void setVisited(int visited) {
		this.visited = visited;
	}
	
	protected int getLabel() {
		return label;
	}
	protected void setLabel(int label) {
		this.label = label;
	}
	
	protected static String parseData(String urlString) {
		// Takes input an URL string
		// Returns a string, corresponding to the data found at the provided URL
		// Throws error if it can't retrieve the data or if the URL doesn't exist
		
		try {
			try {
				var client = HttpClient.newHttpClient();
				var request = HttpRequest.newBuilder()
						.uri(URI.create(urlString))
						.build();
				var response = client.send(request, BodyHandlers.ofString());
				String bing = response.body();
				return bing;
			}catch(IOException e) {
				System.out.println("An IOerror occurred.");
				e.printStackTrace();
			}
		}catch(InterruptedException e) {
			System.out.println("An INTerror occurred.");
			e.printStackTrace();
		}
		return "error.";
	}
	
	private String colorDecider(double x) {
		// Takes input a double and, based on coursework sheet:
		// Returns a string representing the corresponding rgb-string
		// If x is -1, it returns the rgb-string for "low battery"
		// If x is -2, it returns the rgb-string for "not visited"
		
		if(0<=x && x<32) return "#00ff00";
		else
		if(32<=x && x<64) return "#40ff00";
		else
		if(64<=x && x<96) return "#80ff00";
		else
		if(96<=x && x<128) return "#c0ff00";
		else
		if(128<=x && x<160) return "#ffc000";
		else
		if(160<=x && x<192) return "#ff8000";
		else
		if(192<=x && x<224) return "#ff4000";
		else
		if(224<=x && x<256) return "#ff0000";
		else
		if(x==-1) return "#000000";
		else
		return "#aaaaaa";
	}
	
	private String symbolDecider(double x) {
		// Takes input a double and, based on coursework sheet:
		// Returns a string representing the corresponding symbol-string
		// If x is -1, it returns the symbol-string for "low battery"
		// If x is -2, it returns an empty string, corresponding to "not visited"
		
		if(0<=x && x<128) return "lighthouse";
		else
		if(128<=x && x<256) return "danger";
		else
		if(x==-1) return "cross";
		else
		return "";
	}
	
	protected void setSensor(String port, int lbl) {
		// Takes input a string, representing server's port number
		// and an integer, representing the label's value
		// Sets current location and the label of current object,
		// marks the current object as not visited
		
		String[] order = location.split("\\.");
		String location_on_server = order[0]+"/"+order[1]+"/"+order[2];
		var d = "http://localhost:" +port+ "/words/" + location_on_server + "/details.json";
		String details = parseData(d);
		var detail = new Gson().fromJson(details, SensorCoords.class);
		var lng = detail.getCoordinates().getLng();
		var lat = detail.getCoordinates().getLat();
		var point = Point.fromLngLat(lng, lat);
		p=point;
		visited=0;
		label=lbl;
	}
	
	protected Feature getSensorFeature() {
		// Function returns a Feature, corresponding to current object's feature
			
		var sns = Feature.fromGeometry(p);
		sns.addStringProperty("location", location);
		String color, symbol;
		if(visited==0) {
			color = colorDecider(-2);
			symbol = symbolDecider(-2);
		}
		else {
			if(battery<10) {
				color = colorDecider(-1);
				symbol = symbolDecider(-1);
			}
			else {
				var x = Double.parseDouble(reading);
				color = colorDecider(x);
				symbol = symbolDecider(x);
			}
		}
		sns.addStringProperty("rgb-string", color);
		sns.addStringProperty("marker-color", color);
		sns.addStringProperty("marker-symbol", symbol);
		return sns;
	}
}
