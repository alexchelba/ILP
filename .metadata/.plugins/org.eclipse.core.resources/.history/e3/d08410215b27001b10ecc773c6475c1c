package uk.ac.ed.inf.aqmaps;

import java.util.ArrayList;
import java.util.PriorityQueue;

import com.mapbox.geojson.Point;

public class PointDetails extends App {
	private static Point p;
	private static int label;
	
	PointDetails(Point p) {
		this.p = p;
		this.label = -2;
	}
	
	PointDetails(Point p, int label) {
		this.p = p;
		this.label = label;
	}
	
	public static Point getP() {
		return p;
	}
	
	public static void setP(Point p) {
		PointDetails.p = p;
	}
	
	public static int getLabel() {
		return label;
	}
	
	public static void setLabel(int label) {
		PointDetails.label = label;
	}
	
	public static double getDistance(PointDetails y) {
		var x1 = p.longitude();
		var y1 = p.latitude();
		var x2 = y.getP().longitude();
		var y2 = y.getP().latitude();
		var dist = Math.sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2));
		return dist;
	}
	
	public static PointDetails getClosestSensor(ArrayList<PointDetails> sensors) {
		PointDetails closest_sensor=sensors.get(0);
		double minn = 1000;
		for(var sensor : sensors) {
			double num = getDistance(sensor);
			if(num<minn) {
				minn = num;
				closest_sensor = sensor;
			}
		}
		return closest_sensor;
	}
	
	public static int decide_label(ArrayList<PointDetails> sensors, int[] vis) {
		if(label==-2) {
			for(var sensor : sensors) {
				if(vis[sensor.getLabel()]==0) {
					double num = getDistance(sensor);
					if(num < RANGE_WITHIN_SENSOR) {
						label = sensor.getLabel();
						break;
					}
				}
			}
			// Need to check if it's inside no-fly-zones
			label=0;
		}
		return label;
	}
	
	public static ArrayList<PointDetails> get_neighbors() {
		var neighbors = new ArrayList<PointDetails>();
		for(int i=0;i<360;i+=10) {
			var x = MOVE_LENGTH * Math.sin(i);
			var y = MOVE_LENGTH * Math.cos(i);
			var new_lng = p.longitude() + x;
			var new_lat = p.latitude() + y;
			var neighbor = new PointDetails(Point.fromLngLat(new_lng, new_lat));
			neighbors.add(neighbor);
		}
		return neighbors;
	}
}
