package uk.ac.ed.inf.aqmaps;

import java.util.ArrayList;
import java.util.PriorityQueue;

import com.mapbox.geojson.Point;
import com.mapbox.geojson.Polygon;
import com.mapbox.turf.TurfJoins;

public class PointDetails extends App {
	private static Point p;
	private static int label;
	private static int visited;
	private static ArrayList<PointDetails> neighbors;
	
	PointDetails(Point p) {
		this.p = p;
		this.label = -2;
		this.visited = 0;
		this.neighbors = new ArrayList<PointDetails>();
	}
	
	PointDetails(Point p, int label) {
		this.p = p;
		this.label = label;
		this.visited = 0;
		this.neighbors = new ArrayList<PointDetails>();
	}
	
	public static Point getP() {
		return p;
	}
	
	public static void setP(Point p) {
		PointDetails.p = p;
	}
	
	public static int getLabel() {
		return label;
	}
	
	public static void setLabel(int label) {
		PointDetails.label = label;
	}
	
	public static int getVisited() {
		return visited;
	}
	
	public static void setVisited(int visited) {
		PointDetails.visited = visited;
	}
	
	public static double getDistance(PointDetails y) {
		var x1 = p.longitude();
		var y1 = p.latitude();
		var x2 = y.getP().longitude();
		var y2 = y.getP().latitude();
		var dist = Math.sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2));
		return dist;
	}
	
	public static PointDetails getClosestSensor(ArrayList<PointDetails> sensors) {
		PointDetails closest_sensor=sensors.get(0);
		double minn = 1000;
		for(var sensor : sensors) {
			if(sensor.getVisited()==0) {
				double num = getDistance(sensor);
				if(num<minn) {
					minn = num;
					closest_sensor = sensor;
				}
			}
		}
		return closest_sensor;
	}
	
	public static int decide_label(ArrayList<PointDetails> sensors, ArrayList<Polygon> polys) {
		if(label==-2) {
			for(var poly : polys) {
				if(TurfJoins.inside(p, poly)) {
					label=-1;
					return label;
				}
			}
			for(var sensor : sensors) {
				double num = getDistance(sensor);
				if(num < RANGE_WITHIN_SENSOR) {
					label = sensor.getLabel();
					return label;
				}
			}
			return 0;
		}
		return label;
	}
	
	public void set_neighbors() {
		
		for(double i=0;i<360;i+=10) {
			Double x = MOVE_LENGTH * Math.sin(Math.toRadians(i)) + 1E-6;
			Double y = MOVE_LENGTH * Math.cos(Math.toRadians(i)) + 1E-6;
			//System.out.println(x+" "+ y);
			System.out.println(x.doubleValue() + " " + y.doubleValue());
			var new_lng = p.longitude() + x.doubleValue();
			var new_lat = p.latitude() + y.doubleValue();
			var neighbor = new PointDetails(Point.fromLngLat(new_lng, new_lat));
			//System.out.println(new_lng + " "+ new_lat);
			neighbors.add(neighbor);
			//System.out.println(neighbors.get(neighbors.size()-1).getP().longitude() + " "+ neighbors.get(neighbors.size()-1).getP().latitude());
		}
	}
	
	public ArrayList<PointDetails> get_neighbors() {
		/*for(var neighbor : neighbors) {
    		System.out.println(neighbor.getP().longitude() +" "+ neighbor.getP().latitude());
    	}*/
		return neighbors;
	}
}
