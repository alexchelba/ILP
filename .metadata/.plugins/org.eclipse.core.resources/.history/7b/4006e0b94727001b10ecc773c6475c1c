package uk.ac.ed.inf.aqmaps;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.lang.reflect.Type;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.http.HttpResponse.BodyHandlers;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

import com.mapbox.geojson.Feature;
import com.mapbox.geojson.FeatureCollection;
import com.mapbox.geojson.LineString;
import com.mapbox.geojson.Point;

public class App 
{
	private final int MAX_MOVES = 150;
	private final double MOVE_LENGTH = 0.0003;
	private final double START_LNG = 55.9444;
	private final double START_LAT = -3.1878;
	private final double RANGE_WITHIN_SENSOR = 0.0002;
	private final int RANDOM_SEED = 5678;
	
	private static List<Point> makeList(double longi1, double lat1, double longi2, double lat2) {
		// takes 4 coordinates and creates the 4 extreme points of a square with those coordinates
		// returns a list of the points
		
		var x1 = Point.fromLngLat(longi1, lat1);
		var x2 = Point.fromLngLat(longi1, lat2);
		var x3 = Point.fromLngLat(longi2, lat2);
		var x4 = Point.fromLngLat(longi2, lat1);
		return List.of(x1,x2,x3,x4,x1);
	}
	
	private static String colorDecider(double x) {
		// Takes integer x and outputs the corresponding rgb-string, based on coursework sheet
		// returns a string representing the rgb-string
		// returns rgb-string for low battery in case x is out of bounds (x<0 or x>=256)
		
		if(0<=x && x<32) return "#00ff00";
		else
		if(32<=x && x<64) return "#40ff00";
		else
		if(64<=x && x<96) return "#80ff00";
		else
		if(96<=x && x<128) return "#c0ff00";
		else
		if(128<=x && x<160) return "#ffc000";
		else
		if(160<=x && x<192) return "#ff8000";
		else
		if(192<=x && x<224) return "#ff4000";
		else
		if(224<=x && x<256) return "#ff0000";
		else
		if(-1<=x && x<0) return "#000000";
		else
		return "#aaaaaa";
	}
	
	private static String symbolDecider(double x) {
		if(0<=x && x<128) return "lighthouse";
		else
		if(128<=x && x<256) return "danger";
		else
		if(-1<=x && x<0) return "cross";
		else
		return "";
	}
	
	private static String parseData(String urlString) {
		
		try {
			try {
				var client = HttpClient.newHttpClient();
				var request = HttpRequest.newBuilder()
						.uri(URI.create(urlString))
						.build();
				var response = client.send(request, BodyHandlers.ofString());
				String bing = response.body();
				return bing;
			}catch(IOException e) {
				System.out.println("An IOerror occurred.");
				e.printStackTrace();
			}
		}catch(InterruptedException e) {
			System.out.println("An INTerror occurred.");
			e.printStackTrace();
		}
		return "error.";
	}
	
	private static Feature getSensorFeature(Sensor sensor) {
		String loc = sensor.getLocation();
		String[] order = loc.split("\\.");
		String location = order[0]+"/"+order[1]+"/"+order[2];
		String details = parseData("http://localhost:80/words/" + location + "/details.json");
		var detail = new Gson().fromJson(details, SensorDetails.class);
		var lng = detail.getCoordinates().getLng();
		var lat = detail.getCoordinates().getLat();
		var point = Point.fromLngLat(lng, lat);
		var pnt = Feature.fromGeometry(point);
		pnt.addStringProperty("location", loc);
		String color, symbol;
		if(sensor.getBattery()<10) {
			color = colorDecider(-1);
			symbol = symbolDecider(-1);
   		}
		else {
			var x = Double.parseDouble(sensor.getReading());
			color = colorDecider(x);
			symbol = symbolDecider(x);
		}
		pnt.addStringProperty("rgb-string", color);
		pnt.addStringProperty("marker-color", color);
		pnt.addStringProperty("marker-symbol", symbol);
		return pnt;
	}
	
	public static double getDistance(Point x, Point y) {
		var x1 = x.longitude();
		var y1 = x.latitude();
		var x2 = y.longitude();
		var y2 = y.latitude();
		var dist = Math.sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2));
		return dist;
	}
	
    public static void main( String[] args )
    {
    	var no_fly = parseData("http://localhost:80/buildings/no-fly-zones.geojson");
    	var fc = FeatureCollection.fromJson(no_fly);
    	var featureList = fc.features();
    	// creates the LineString corresponding to the confinement area of the drone
    	var extremes = makeList(-3.192473, 55.946233, -3.184319, 55.942617);
    	var area = LineString.fromLngLats(extremes);
    	// transforms it into a feature and adds it to the list of features
    	var map = Feature.fromGeometry(area);
    	featureList.add(map);
    	
    	var quality = parseData("http://localhost:80/maps/2021/06/15/air-quality-data.json");
    	var listType = new TypeToken<ArrayList<Sensor>>() {}.getType();
    	ArrayList<Sensor> sensors = new Gson().fromJson(quality, listType);
    	ArrayList<Point> sensor_coords = new ArrayList<Point>();
    	for(Sensor sensor : sensors) {
    		var pnt = getSensorFeature(sensor);
    		var p = (Point) pnt.geometry();
    		sensor_coords.add(p);
			featureList.add(pnt);
    	}
    	
    	var final_fc = FeatureCollection.fromFeatures(featureList);
        System.out.println(final_fc.toJson());
    }
}
