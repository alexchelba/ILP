package uk.ac.ed.inf.aqmaps;

import java.util.ArrayList;

import com.mapbox.geojson.Feature;
import com.mapbox.geojson.LineString;
import com.mapbox.geojson.Point;
import com.mapbox.geojson.Polygon;

public class Navigation extends App {
	private int made_moves;
	private String ans_flightpath;
	private int count_sensors;
	private ArrayList<Feature> featureList;
	
	private PointDetails start_p;
	private ArrayList<Polygon> no_fly_polygons;
	private ArrayList<Sensor> sensors;
	private ArrayList<PointDetails> sensor_coords;
	Navigation(PointDetails sp, ArrayList<Polygon> nfp, ArrayList<Sensor> s, ArrayList<PointDetails> sc) {
		start_p = sp;
		no_fly_polygons = nfp;
		sensors = s;
		sensor_coords = sc;
		
		count_sensors=0;
		made_moves=0;
		ans_flightpath = "";
		featureList = new ArrayList<Feature>();
	}
	private static String create_line(int idx, Point ps, int angle, Point pf, String loc) {
		var lng1 = Double.toString(ps.longitude());
    	var lat1 = Double.toString(ps.latitude());
    	var lng2 = Double.toString(pf.longitude());
    	var lat2 = Double.toString(pf.latitude());
    	var index = Integer.toString(idx);
    	var direction = Integer.toString(angle);
    	var ans = index+","+lng1+","+lat1+","+direction+","+lng2+","+lat2+","+loc+'\n';
		return ans;
	}
	private PointDetails goRound() {
		var closest_sensor = start_p.getClosestSensor(sensor_coords).getLabel();
        var path = new ArrayList<Point>();
        var lbl = start_p.decide_label(sensor_coords, no_fly_polygons);
        
        if(lbl>0) {
        	sensor_coords.get(lbl-1).setVisited(1);
        	count_sensors++;
        }

        start_p.setVisited(1);
        path.add(start_p.getP());
        var actual_pnt = start_p;
        
        while(made_moves<MAX_MOVES) {
        	
        	actual_pnt.set_neighbors(path);
        	var neighbors = actual_pnt.get_neighbors();
        	var angle = 0;
        	var minn = 1000.0;
        	var op = Point.fromLngLat(-1, -1);
        	var next_pnt = new PointDetails(op);
        	
        	for(var i=0;i<neighbors.size();i++) {
        		
        		var neighbor = neighbors.get(i);
        		if(neighbor.getVisited()==0&&actual_pnt.clearFlightPath(i,no_fly_polygons)) {
        			
	        		var n_lbl = neighbor.decide_label(sensor_coords, no_fly_polygons);
	        		
	        		if(n_lbl>=0) {
	        			
		        		if(n_lbl==closest_sensor) {
		        			
		        			sensor_coords.get(n_lbl-1).setVisited(1);
		        			closest_sensor = neighbor.getClosestSensor(sensor_coords).getLabel();
		        			count_sensors++;
		        			next_pnt = neighbor;
		        			angle = i * 10;
		        			minn=800.0;
		        			break;
		        		}
		        		else if(n_lbl==0){
		        			
		        			var num = neighbor.getDistance(sensor_coords.get(closest_sensor-1));
		        			if(num<minn) {
		            			minn = num;
		            			angle = i * 10;
		            			next_pnt = neighbor;
		            		}
		        		}
		        		else {
		        			
		        			if(sensor_coords.get(n_lbl-1).getVisited()==0) {
			        			sensor_coords.get(n_lbl-1).setVisited(1);
			        			count_sensors++;
		        			}
			        		var num = neighbor.getDistance(sensor_coords.get(closest_sensor-1));
			        		if(num<minn) {
			        			minn = num;
			        			angle = i * 10;
			        			next_pnt = neighbor;
		        			}
		        		}
	        		}
        		}
        	}
        	
        	if(next_pnt.getLabel()==-2||minn==1000.0) {
        		
        		sensor_coords.get(closest_sensor-1).setVisited(1); 
        		var x = actual_pnt.getClosestSensor(sensor_coords).getLabel();
        		sensor_coords.get(closest_sensor-1).setVisited(0);
        		closest_sensor=x;
        	}
        	else {
        		
	        	next_pnt.setVisited(1);
	        	var location="null";
	        	if(next_pnt.getLabel()>0)
	        		location = sensors.get(next_pnt.getLabel()-1).getLocation();
	        	var t = create_line(made_moves+1, actual_pnt.getP(), angle, next_pnt.getP(), location);
	        	ans_flightpath+=t;
				path.add(next_pnt.getP());
	        	made_moves++;
	        	actual_pnt = next_pnt;
        	}
        	if(closest_sensor==-2) {
        		
        		break;
        	}
        }
        
        var line = LineString.fromLngLats(path);
		var geometric_line = Feature.fromGeometry(line);
		featureList.add(geometric_line);
		return actual_pnt;
	}
	
	private void comeBack(PointDetails actual_pnt) {
		var path_to_start = new ArrayList<Point>();
		path_to_start.add(actual_pnt.getP());
		
        while(made_moves<MAX_MOVES) {
        	
        	actual_pnt.set_neighbors(path_to_start);
        	var neighbors = actual_pnt.get_neighbors();
        	var angle = 0;
        	var minn = 1000.0;
        	var op = Point.fromLngLat(-1, -1);
        	var next_pnt = new PointDetails(op);
        	
        	for(var i=0;i<neighbors.size();i++) {
        		
        		var neighbor = neighbors.get(i);
        		if(neighbor.getVisited()==0&&actual_pnt.clearFlightPath(i,no_fly_polygons)) {
        			
	        		var n_lbl = neighbor.decide_label(sensor_coords, no_fly_polygons);
	        		if(n_lbl>=0) {
	        			
	        			var dist = neighbor.getDistance(start_p);
	        			if(dist<minn) {
	        				
		        			minn = dist;
		        			next_pnt = neighbor;
		        			angle = i*10;
		        		}
	        		}
        		}
        	}
        	
        	next_pnt.setVisited(1);
        	var location="null";
        	if(next_pnt.getLabel()>0)
        		location = sensors.get(next_pnt.getLabel()-1).getLocation();
        	var t = create_line(made_moves+1, actual_pnt.getP(), angle, next_pnt.getP(), location);
        	ans_flightpath+=t;
			path_to_start.add(next_pnt.getP());
        	made_moves++;
        	actual_pnt = next_pnt;
        	if(actual_pnt == start_p||actual_pnt.getDistance(start_p)<RANGE_WITHIN_SENSOR) {
        		
        		break;
        	}
        }
        
        if(path_to_start.size()>1) {
        	
	        var return_line = LineString.fromLngLats(path_to_start);
			var geometric_return_line = Feature.fromGeometry(return_line);
			featureList.add(geometric_return_line);
	    }
	}
	
	protected void navi() {
    	
		var actual_pnt = goRound();
		// RETURN TO STARTING POINT
		comeBack(actual_pnt)
		
	}
}
